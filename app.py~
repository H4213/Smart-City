#! /usr/bin/python
# -*- coding:utf-8 -*-

import sys
reload(sys)
sys.setdefaultencoding("utf-8")

import os
from flask import Flask, flash, render_template, request, session
from flask.ext.sqlalchemy import SQLAlchemy

from controler import control

from model.modele import User, Compte, JGroupe, Groupe, Log
from model.form import MyForm, Paiment

from xml.etree import ElementTree
from xml.etree.ElementTree import Element
from xml.etree.ElementTree import SubElement


app = Flask(__name__)
db = control.connectToDatabase()

@app.route('/', methods=('GET', 'POST'))
def index():
  return "Hi Bitches"

#Affichage des différents marqueurs enregistrés
@app.route('/marker')
@app.route('/marker/<cathegorie>')
def marker(cathegorie = None):
  return control.marker(cathegorie)

#renvoie l'id après l'authentification de l'utilisateur
@app.route('/auth')
def auth():
  return control.authentificaton()

#ajout d'un marqueur
@app.route('/add/marker')
def addMarker():
  return "marker Added"

#inscription d'un utilisateur
@app.route('/add/user')
def addUser():
  return "user Added"





@app.route('/ranking', methods=('GET', 'POST'))
def ranking():
  return "ranking"

@app.route('/user')
@app.route('/user/<user>')
@app.route('/user/<user>/<name>')
def user(user=None, name=None):
  return "{} {}".format(user, name)

@app.route('/form', methods=('GET', 'POST'))
def form():
  form = MyForm()
  if form.validate_on_submit():
    flash('Thanks for registering')
    return form.name.data
  return render_template('test.html', form=form)

@app.route('/xml')
def xml():
  document = ElementTree.parse( 'static/xml/en_En.xml' )
  root = document.getroot()
  item = document.findall('items/item')

  for user in document.findall( 'items/item' ):
    print user.attrib[ 'name' ]

  #user = document.find( 'item')

  return document.find(".//*[@name='item1']").text

@app.route('/db2')
def database2():
  user = User.query.filter_by(id=1).first()
  user.compte.montant = 10
  db.session.commit()
  return "done"

@app.route('/db3')
def database3():
  user = User.query.filter_by(id=1).first()
  return str(user.compte.montant)


@app.route('/db')
def database():
  print "salut"
  user = User()
  user.pseudo = "Léo1"
  user.mail = "test@mail.fr"
  user.num = "04123456789"
  user.passw = "test"

  #useer = User.query.filter_by(id=1).first()
  #compte2 = Compte.query.filter_by(id=1).first()
  
  compte = Compte()
  compte.montant = "1"
  user.compte = compte

  log = Log()
  log.user = user
  log.montant = "100"

  # connect to session and commit data to database
  db.session.add(compte)
  db.session.add(log)
  db.session.add(user)
  db.session.commit()
  
  """record = session.query(Compte).filter_by(id=2).one()"""

  return user.compte.montant

@app.route('/charge', methods=['GET', 'POST'])
def charge():
  #if request.method != 'POST':
    #return index()

  amount = int(request.form['numeric']) * 100

  customer = stripe.Customer.create(
      email='customer@example.com',
      card=request.form['stripeToken']
  )

  charge = stripe.Charge.create(
      customer=customer.id,
      amount=amount,
      currency='usd',
      description='Flask Charge'
  )

  return render_template('charge.html', amount=amount)

@app.errorhandler(404)
def page_not_found(error):
    return render_template('page_not_found.html'), 404

if __name__ == '__main__':
  app.run(debug=True)
